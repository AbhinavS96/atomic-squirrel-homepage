- name: "Idea"
  sublist:
    - name: "Find a problem"
      description: |
        See <a href="http://www.hello-startup.net/resources/startup-ideas/?ref=startup-checklist" target="_blank">Startup Ideas</a>.
    - name: "Validate the problem"
      description: |
        See <a href="http://www.amazon.com/Four-Steps-Epiphany-Steven-Blank/dp/0976470705">The Four Steps to the Epiphany</a>.
    - name: "Size the market"
      description: |
        See <a href="http://www.hello-startup.net/resources/idea-validation/?ref=startup-checklist">Market Sizing Resources</a>.
    - name: "Check viability"
      description: |
        Can this problem be solved? Can this problem be solved by
        <em>you</em>? See
        <a href="http://pando.com/2013/02/20/sequoias-why-now/" target="_blank">Sequoia's Why Now?</a>
        and
        <a href="http://www.amazon.com/The-Start-up-You-Yourself-Transform-ebook/dp/B0050DIWHU" target="_blank">The Startup of You</a>.
    - name: "Consider alternatives"
      description: |
        See <a href="https://al3x.net/2013/05/23/letter-to-a-young-programmer.html" target="_blank">Letter To A Young Programmer Considering A Startup</a>.
    - name: "Educate yourself"
      description: |
        How do you build a startup? How do you design products? How do you build
        the technology? How do you hire people? See
        <a href="http://www.hello-startup.net/?ref=startup-checklist" target="_blank">Hello, Startup</a>
        and the
        <a href="https://www.goodreads.com/list/show/88189.Hello_Startup_Reading_List" target="_blank">Hello, Startup Reading List</a>.
    - name: "Talk to your friends and family"
      description: |
        A startup is a big commitment. Make sure everyone is on board before
        you get started.
- name: "Legal"
  sublist:
    - name: "Hire a lawyer"
      description: |
        Running a company involves many tricky legal questions. How do I
        incorporate? What should I include in a contract? What do I need to
        do in terms of trademarks, copyrights, and patents? What are all of
        these conditions on the term sheet? The best way to answer these
        questions is to hire a lawyer who is experienced with helping startups.
        If you can't afford that, services like
        <a href="https://www.legalzoom.com" target="_blank">LegalZoom</a> and
        <a href="http://www.rocketlawyer.com" target="_blank">RocketLawyer</a>
        are your next best bet.
    - name: "Register a name"
      description: |
        Pick a name that is unique: it should be memorable, stand out from the
        competition, and there should be a matching domain name available. Make
        sure the name isn't already registered in your state and that it does
        not infringe on another company's trademark in the same industry. For
        more information, see
        <a href="https://www.sba.gov/content/how-name-business" target="_blank">How to Name a Business</a>.
    - name: "Incorporate"
      description: |
        Incorporating yoru business is important to protect your personal assets
        from any law suits that come up against your startup. Startups that are
        planning on raising money from VCs, issuing shares of stock, having an
        IPO, or getting acquired should incorporate as Delaware C Corp. Other
        types of startups should incorporate as an LLC or S Corp. See
        <a href="http://www.amazon.com/The-Entrepreneurs-Guide-Business-Edition/dp/0538466464" target="_blank">The Entrepreneur's Guide to Business Law</a>
        for more information.
    - name: "Figure out equity"
      description: |
        Split up ownership of the company amongst the founders. An equal split
        is usually a good idea, and a vesting schedule is an absolute
        requirement. This way, everyone is bought in for the long term.
    - name: "Get licenses and permits"
      description: |
        Depending on the type of business you started and where you live, you
        may have to apply for licenses and permits.
    - name: "Get an EIN"
      description: |
        For tax purposes, you need to request a Federal Employer Identification
        Number (EIN) from the IRS. Some states also have a separate state tax
        identification number that you'll have to request.
    - name: "Get insurance"
      description: |
        Most companies will need general liability insurance, workers comp,
        unemployment insurance, disability insurance, and property insurance.
    - name: "Intellectual Property"
      description: |
        Once you start working, you'll need to file for trademarks and patents.
    - name: "Contracts"
      description: |
        Work with your lawyer to draft contracts for your customers, employees,
        contractors, partners, suppliers, and so on.
- name: "Financial"
  sublist:
    - name: "Hire an accountant"
      description: |
        Running a company involves many tricky financial questions. How do I
        pay corporate taxes? How do I write off business expenses? When will my
        company be profitable? The best way to answer them is to hire an
        accountant (CPA) who has experience working with startups. If you can't
        afford that, your next best bet is a service like
        <a href="http://www.hrblock.com/" target="_blank">H&R Block</a>.
    - name: "Accounting system"
      description: |
        Every company needs to track its income, expenses, assets, liabilities,
        and equity. Work with your accountant to figure out the best accounting
        system for your business. For small companies, a tool like
        <a href="http://quickbooks.intuit.com/" target="_blank">Quickbooks</a>
        is usually your best bet. Use it to track all purchases, keep track of
        all receipts, send invoices to customers, track services you're paying
        for, and set up payroll. Make sure you learn and comply with all
        government requirements around payroll taxes, self-employment taxes,
        workers compensation, and so on.
    - name: "Taxes and annual reports"
      description: |
        Every year, you must pay taxes and file annual reports to state and
        federal governments. These are due at different times throughout the
        year, so make sure to figure out the deadlines ahead of time and get
        them plugged into your calendar.
    - name: "Get a business bank account"
      description: |
        It is essential to keep your personal finances separate from your
        business finances. Apply for a business checking account and credit
        card as soon as you've incorporated. See NerdWallet's
        <a href="http://www.nerdwallet.com/business-checking-accounts/" target="_blank">Business Checking</a>
        and
        <a href="https://www.nerdwallet.com/business-credit-cards" target="_blank">Business Credit Card</a>
        guides for more information.
    - name: "Business plan"
      description: |
        Writing out a business plan is a great way to force yourself to think
        through many of the major questions of running a business. What does
        your company do? How will people find it? Who are the competitors? How
        will you build it? How much money do you need to get started? How will
        you get this money? How will your business make money? When will you
        break even? What is your backup plan in case things don't work out?
        See <a href="http://www.hello-startup.net/resources/monetization/?ref=startup-checklist" target="_blank">Startup Monetization Resources</a>.
    - name: "Pitch deck"
      description: |
        Before you can raise money from outsiders, you'll need not only a
        business plan, but also a pitch deck. The pitch deck is a presentation
        designed to convince investors that they should give you money. It will
        include a brief overview of your business plan, but instead of a formal
        and stuffy document, it should tell a story, engage the viewer
        emotionally, show off the team you've built, and make it clear what
        you're looking for. For more information, see
        <a href="http://www.amazon.com/The-Art-Pitch-Persuasion-Presentation/dp/0230120512" target="_blank">The Art of the Pitch</a>
        and
        <a href="http://www.amazon.com/Pitch-Anything-Innovative-Presenting-Persuading/dp/0071752854" target="_blank">Pitch Anything</a>.
    - name: "Raise money"
      description: |
        How will you fund your company before it starts to bring in revenue and
        pay for itself?
      sublist:
        - name: "Bootstrap"
          description: |
            If you've got the money for it, you can fund the business out of
            your own savings. This works best for businesses that have low
            up-front costs and can start making money early in their lives,
            such as a service business that can start charging clients
            immediately.
        - name: "Loans"
          description: |
            Raise money by promising to pay it back in the future, usually with
            interest. The advantage of a loan versus equity financing is that you
            keep control over your business. The disadvantage of a loan is that
            you eventually have to pay it back, usually with interest, whether
            or not your company is successful. If you're very confident your
            business will be making enough money by the time the loan payments
            are due, a loan can be great, but for many startups, equity
            financing is a better option.
        - name: "Equity financing"
          description: |
            Raise money from investors in exchange for a part of the company.
            The advantage of equity financing is that you can raise very large
            amounts of money, which is important for businesses that have large
            up-front costs (e.g., SpaceX) or cannot be monetized for a long time
            (e.g., Facebok). The disadvantage of equity financing is that to
            raise more money, you have to give up control of more of your
            company. If you give up too much control, you may find the company
            moving in a direction you don't like (e.g., the investors force you
            to go public because they want to see a return on their investment)
            or you may even get fired from your own business. See
            <a href="http://www.amazon.com/Venture-Deals-Smarter-Lawyer-Capitalist/dp/1118443616" target="_blank">Venture Deals</a>
            and
            <a href="http://www.amazon.com/Mastering-VC-Game-Venture-Start-up/dp/1591844444" target="_blank">Mastering the VC Game</a>
            for more information.
        - name: "Crowdfunding"
          description: |
            Instead of raising a large amount money from a small number of
            investors, you can use crowdfunding platforms to raise a small
            amount of money from a large number of people online. There are
            three primary types of crowdfunding platforms: rewards-based, where
            you offer rewards or the actual product in exchange for the money (e.g.,
            <a href="https://www.kickstarter.com/" target="_blank">KickStarter</a>,
            <a href="https://www.indiegogo.com/" target="_blank">IndieGoGo</a>);
            debt-based, where you eventually pay the money back, similar to a
            loan (e.g.,
            <a href="https://www.lendingclub.com/" target="_blank">Lending Club</a>,
            <a href="https://www.prosper.com/" target="_blank">Prosper</a>);
            and equity-based, where you give investors part-ownership of your
            company in exchange for the money (e.g.,
            <a href="https://www.crowdfunder.com/" target="_blank">Crowdfunder</a>,
            <a href="https://wefunder.me/" target="_blank">Wefunder</a>).
- name: "Product"
  sublist:
    - name: "Design"
      sublist:
        - name: "Personas"
          description: |
            Never design software for the average user. Instead, come up with
            <a href="https://en.wikipedia.org/wiki/Persona_(user_experience)">personas</a>,
            or fictional characters that represent specific users of your product.
            Each persona should have a name, picture, and a list of behavior
            patterns, goals, skills, and attitudes. Define several primary
            personas who's goals <em>must</em> be met, or your product is a
            failure. Design the software for those personas. For more info, see
            <a href="http://www.amazon.com/The-Inmates-Are-Running-Asylum/dp/0672326140" target="_blank">The Inmates Are Running the Asylum</a>
            and
            <a href="http://www.ux-lady.com/diy-user-personas/" target="_blank">DIY User Personas</a>.
        - name: "User stories"
          description: |
            Once you know who your users are (see personas), come up with a
            list of user stories that captures what the user wants and why. In
            other words, before you start working on features and get lost in
            implementation details, clearly define the <em>goals</em> of your
            users. As you design your product, frequently check to make sure
            that you are meeting these goals.
        - name: "Design reuse"
          description: |
            Good software developers reuse as much battle-tested code as
            possible. Good designers reuse as many battle-tested designs as
            possible. There are many web design templates, mobile templates,
            stock photos, icons, fonts, and other design resources available
            all over the Internet, both for free and for pay. See
            <a href="http://www.hello-startup.net/resources/design/?ref=startup-checklist" target="_blank">Design Resources</a>
            and
            <a href="http://www.hello-startup.net/resources/images-photos-graphics/?ref=startup-checklist" target="_blank">Photos and Graphics Resources</a>
            for more information.
        - name: "Copywriting"
          description: |
            Most design is about the text and not the colors, borders, pictures,
            and fancy animations. In fact, you could take away all the colors,
            borders, pictures, and fancy animations, and as long as the text was
            still there, the product is probably still usable. Your software
            has a voice, and it's talking to your users all the time. What are
            you telling them? What kind of voice will you use? What is the name
            and tag line for your product that will make users click on it when
            it comes up in a search or in their news feed? What is the call to
            action on the landing page that will get them to click through?
            Don't put off copywriting to the end and don't replace it with
            lorem ipsum. See
            <a href="https://gettingreal.37signals.com/" target="_blank">Getting Real</a>
            for more information.
        - name: "Usability testing"
          description: |
            Every few weeks, bring in real users, and observe them as they use
            your product to solve problems. Watching outsiders interact with
            your design is an eye-opening experience and one of the most best
            bang-for-the-buck tools for improving a design. For more information, see
            <a href="http://www.amazon.com/gp/product/0321965515/" target="_blank">Don't Make Me Think</a>.
        - name: "Platform"
          description: |
            What platforms will you need to support? Desktop web? Mobile web?
            Native mobile apps (iOS, Android, etc.)? IoT? Which form factors?
            Desktop? Phone? Tablet? Wearable? And what design philosophy will
            you use? Mobile first? Web first? Phone first?
    - name: "MVP"
      description: |
        A Minimal Viable Product (MVP) is a version of a new product that allows
        you to learn the most about your customers for the least amount of
        effort. It's not a one-time activity, but a repeated philosophy of how
        you approach every product: always validate your ideas as cheaply as
        possible before investing further.
      sublist:
        - name: "Understand the MVP"
          description: |
            There are many misconceptions about what an MVP is. To learn how an
            MVP really works, see
            <a href="http://www.amazon.com/The-Lean-Startup-Entrepreneurs-Continuous/dp/0307887898" target="_blank">The Lean Startup</a>,
            <a href="http://www.amazon.com/The-guide-Minimum-Viable-Product-ebook/dp/B00ORWJ0GC" target="_blank">The guide to Minimum Viable Product</a>,
            and
            <a href="http://blog.crisp.se/wp-content/uploads/2014/10/Screen-Shot-2014-10-07-at-08.20.00.png" target="_blank">this wonderful illustration</a>
            by <a href="http://blog.crisp.se/2014/10/08/henrikkniberg/what-is-scrum" target="_blank">Henrik Kniberg</a>).
        - name: "Pick the right type of MVP"
          description: |
            An MVP does not have to be a full implementation of your product
            idea. There are many types of MVPs that are simpler and cheaper to
            build, but still do a great job of validating your hypothesis, such
            as landing pages, explainer videos, crowdfunding campaigns, Wizard
            of Oz MVPs, and Piecemeal MVPs. See
            <a href="http://scalemybusiness.com/the-ultimate-guide-to-minimum-viable-products/" target="_blank">The Ultimate Guide to Minimum Viable Products</a>,
            for more information.
        - name: "Focus on the differentiators"
          description: |
            For a product to be successful, it's can't be just a little better
            than the alternatives; it needs to be 10x better. Your ideas must
            be <a href="http://www.ted.com/talks/seth_godin_on_sliced_bread?language=en" target="_blank">remarkable</a>
            if you want them to spread. And
            <a href="http://paulbuchheit.blogspot.it/2010/02/if-your-product-is-great-it-doesnt-need.html" target="_blank">if your product is great, it doesn't need to be good</a>.
        - name: "Target earlyvangelists"
          description: |
            What kind of customer is going to trust a no-name startup with a
            buggy, incomplete product? Steve Blank called them
            <a href="https://en.wikipedia.org/wiki/Earlyvangelist">earlyvangelists</a>:
            they have a problem, they are aware of the problem, they have been
            actively looking for a solution, they have jury-rigged their own
            workarounds, and they have the money to spend on a better solution.
            In the early days of a startup, the only way to succeed early on is
            to identify and target earlyvangelists. See
            <a href="http://www.amazon.com/Four-Steps-Epiphany-Steven-Blank/dp/0976470705">The Four Steps to the Epiphany</a>
            for more information.
        - name: "MVP tools and resources"
          description: |
            There are many useful tools available for building your MVP: landing
            page services, A/B testing tools, explainer video software, rapid
            prototyping tools, and so on. See
            <a href="http://www.hello-startup.net/resources/mvp/?ref=startup-checklist" target="_blank">Minimal Viable Product Resources</a>
            for more information.
    - name: "Data"
      description: |
        It is the product manager's job to define
        <a href="http://blog.adamnash.com/2011/12/16/be-a-great-product-leader/" target="_blank">(1) What game are we playing? and (2) How do we keep score?</a>.
        The best way to keep score is use data.
      sublist:
        - name: "AARRR Metrics"
          description: |
            Every startup needs to track at least 5 key metrics: Acquisition,
            Activation, Retention, Referral, and Revenue (easy to remember by
            the acronymn AARRR from Dave McClure's
            <a href="http://500hats.typepad.com/500blogs/2007/09/startup-metrics.html" target="_blank">Start Metrics for Pirates</a>).
        - name: "The magic number"
          description: |
            The magic number is a metric that represents the moment your users
            have an "aha" experience with your product&mdash;that is, they
            finally get the value and become highly engaged users. For Facebook,
            it was connecting with 7 friends in the first 10 days; for Twitter,
            it was 30 follows; for DropBox, it was 1 file upload (see
            <a href="http://www.growhack.com/2012/12/04/discovering-your-aha-moment/">here</a>
            for more). Find the magic number for your business, and suddenly,
            decision making and priotization across the company becomes much
            easier, as everyone can rally behind a single, simple concept.
            For more information, see
            <a href="http://www.quora.com/Growth-Hacking/How-do-you-find-insights-like-Facebooks-7-friends-in-10-days-to-grow-your-product-faster">How do you find insights like Facebook's "7 friends in 10 days" to grow your product faster?</a>.
        - name: "Data-driven development"
          description: |
            Gathering data to see how past product decisions worked out is good.
            Using data <em>drive</em> future product decisions is even better.
            See <a href="http://mcfunley.com/data-driven-products-now">Data Driven Products Now!</a>
            for a guide.
    - name: "Distribution"
      description: |
        The best product doesn't always win. It's the best product the customer
        knows about that wins. See
        <a href="https://en.wikipedia.org/wiki/Browser_wars" target="_blank">browser wars</a>
        and
        <a href="http://thenumbersguru.blogspot.ca/2008/08/tivo-market-share.html" target="_blank">TiVo</a>.
        Distribution is how you get customers to know about your product.
      sublist:
        - name: "Word-of-mouth"
          description: |
            Word-of-mouth marketing is where your current customers tell new
            customers about your product. Products where interacting with other
            users is an inherent part of the experience, such as social
            networks and collaboration tools, can benefit from viral growth. See
            <a href="http://www.amazon.com/Viral-Loop-Facebook-Businesses-Themselves/dp/1401323499" target="_blank">Viral Loop</a>
            and
            <a href="http://blog.adamnash.com/2012/04/04/user-acquisition-viral-factor-basics/" target="_blank">User Acquisition: Viral Factor Basics</a>
            for more information.
        - name: "Marketing"
          description: |
            Marketing is where you tell new users about your product. There are
            many different ways to do this. See
            <a href="https://github.com/mmccaff/PlacesToPostYourStartup" target="_blank">Places To Post Your Startup</a>
            for a great list.
          sublist:
            - name: "Advertising"
              description: |
                There are many different advertising tools: TV ads, newspaper
                ads, billboards, and, of course, countless digital ad networks,
                such as
                <a href="https://www.google.com/adwords/" target="_blank">Google Adwords</a>,
                <a href="https://www.facebook.com/business/products/ads" target="_blank">Facebook ads</a>,
                <a href="https://ads.twitter.com/" target="_blank">Twitter ads</a>,
                <a href="https://www.linkedin.com/ads/" target="_blank">LinkedIn ads</a>,
                and
                <a href="https://www.google.com/admob/" target="_blank">AdMob</a>.
            - name: "PR and media"
              description: |
                Form relationships with bloggers, journalists, and news agencies,
                and get them to talk about your product. If you don't have those
                connections already, see
                <a href="http://www.quora.com/What-is-the-best-free-media-contact-database" target="_blank">best media contact databases</a>,
                <a href="https://justreachout.io/" target="_blank">JustReachOut</a>,
                <a href="http://buzzsumo.com/" target="_blank">BuzzSumo</a>,
                and
                <a href="https://www.hey.press/" target="_blank">hey.press</a>.
            - name: "Search Engines"
              description: |
                Search Engine Optimization (SEO) is how you make your website
                rank highly in search results. Google gets trillions of searches
                per year, so you can build a massive business by carving out
                just a small portion of this query volume. See
                <a href="http://static.googleusercontent.com/media/www.google.com/en//webmasters/docs/search-engine-optimization-starter-guide.pdf" target="_blank">The Google Search Engine Optimization Starter Guide</a>,
                <a href="https://moz.com/beginners-guide-to-seo" target="_blank">Moz Beginner's Guide to SEO</a>,
                and
                <a href="http://searchengineland.com/guide/seo" target="_blank">Search Engine Land’s Guide To SEO</a>.
            - name: "Social media"
              description: |
                Social media sites offer a way to build a community around
                your business. Put up company pages on Facebook, Twitter,
                LinkedIn, Google Plus, Instagram, and Pinterest, and update
                them frequently.
            - name: "Inbound marketing"
              description: |
                Create valuable content that attracts your audience. This can
                be a blog, YouTube channel, home page, talks at conferences,
                and open source software. See
                <a href="http://www.hubspot.com/inbound-marketing" target="_blank">What is Inbound Marketing?</a>
                and
                <a href="http://www.inboundmarketing.com/" target="_blank">Inbound Marketing</a>
                for more information.
        - name: "Sales"
          description: |
            Marketing gets customers in the door. Sales is how you close the
            deal. There are several different types of sales, including
            automated sales (e.g., checkout page on an e-commerce website),
            inside sales (e.g., a salesperson contacting customers via phone,
            email, and chat), and outside sales (e.g., a salesperson going to
            customer sites for demos and negotiations). Most startup founders
            should do all the sales themselves in the early days of their
            company (see <a href="http://paulgraham.com/ds.html" target="_blank">Do Things That Don't Scale</a>).
        - name: "Branding"
          description: |
            Branding isn't about a single ad campaign or a logo or any one
            thing, but the sum total of all the ways you interact with the
            customer and how they think about your business. It's not about
            features or specs, but about the promise you're making to your customers. See
            <a href="http://www.useronboard.com/features-vs-benefits/" target="_blank">Features vs Benefits</a>
            and
            <a href="https://www.youtube.com/watch?v=9GMQhOm-Dqo" target="_blank">Steve Jobs on "Think Different"</a>
            for more information.
- name: "Technology"
  sublist:
    - name: "Server-side"
      sublist:
        - name: "Pick a programming language"
          description: |
            Key aspects to consider: community, problem fit, maturity,
            paradigm (OO, functional, static typing, memory management),
            performance (concurrency, GC), and productivity
            (conciseness, available libraries, ease of use).
        - name: "Pick a server-side framework"
          description: |
            Key aspects to consider: minimal vs full stack framework, problem
            fit, data manipulation, view technologies, testability,
            scalability, deployment, security. See
            <a href="http://www.ybrikman.com/writing/2014/09/29/nodejs-vs-play-framework/" target="_blank">Node.js vs Play Framework</a>
            for an example of how to compare frameworks.
        - name: "Pick an architecture"
          description: |
            Will you build a single, monolithic app? A number of small, loosely
            coupled microservices? Will use a reactive architecture? What about
            <a href="http://www.confluent.io/blog/making-sense-of-stream-processing/" target="_blank">Stream processing, Event sourcing, CQRS</a>?
    - name: "Client-side"
      description: |
        What clients do you support? Desktop web? Mobile web? Native mobile apps
        (iOS, Android, etc.)? Wearables? IoT?
      sublist:
        - name: "Devices"
          description: |
            What devices and screen sizes do you support? Desktop? Phone?
            Tablet? Wearable? Are you using responsive design? Are you using
            graceful degradation or progressive enhancement? Does your
            site scale properly on mobile screens? Does it respond correctly
            to touch events? Does it rely on hover menus?
        - name: "Native apps, cross-platform app, or web-app"
          description: |
            Write multiple apps in multiple native languages (Objective C or
            Swift, Java, C#, etc.), or write all in one common language that is
            transcompiled to native languages
            (<a href="http://phonegap.com/" target="_blank">PhoneGap</a>,
            <a href="http://www.appcelerator.com/product/" target="_blank">Titanium</a>,
            <a href="https://www.parse.com/" target="_blank">Parse</a>, etc.),
            or write only for the web (HTML5).
        - name: "Client-side framework"
          description: |
            Will you use jQuery or Zepto? Backbone, React, Ember, or Angular?
            RequireJS, Browserify, or Webpack? Less or Sass?
        - name: "SEO"
          description: |
            Have you optimized your website's links, headers, URLs, and
            meta tags for search engine crawlers? For a guide, see
            <a href="http://static.googleusercontent.com/media/www.google.com/en//webmasters/docs/search-engine-optimization-starter-guide.pdf" target="_blank">The Google Search Engine Optimization Starter Guide</a>,
            <a href="https://moz.com/beginners-guide-to-seo" target="_blank">Moz Beginner's Guide to SEO</a>,
            and
            <a href="http://searchengineland.com/guide/seo" target="_blank">Search Engine Land’s Guide To SEO</a>.
        - name: "Accessibility"
          description: |
            Is your website accessible to people with disabilities? Do all
            images have alternate text? Can everything be navigated using
            just a keyboard? Do you have captions for videos? Is there
            enough contrast in your color choices? Are the font sizes big
            enough? For more information, see
            <a href="https://www.w3.org/WAI/intro/accessibility.php" target="_blank">Introduction to Web Accessibility</a>,
            <a href="http://a11yproject.com/" target="_blank">The Accessibility Project</a>,
            <a href="https://github.com/addyosmani/a11y" target="_blank">a11y</a>,
            and
            <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA" target="_blank">ARIA</a>.
        - name: "Meta tags"
          description: |
            Do you have the proper meta tags to specify the website
            character set, canonical URL, title, description, and robots
            directives (see
            <a href="http://searchenginewatch.com/sew/how-to/2067564/how-to-use-html-meta-tags">How to Use HTML Meta Tags</a>)?
            Did you add meta tags to your webpage so it shows up correctly
            when shared on social media sites (see
            <a href="https://developers.facebook.com/docs/sharing/webmasters#markup" target="_blank">Facebook Open Graph Markup</a>
            and
            <a href="https://dev.twitter.com/cards/overview" target="_blank">Twitter Cards</a>)?
            Did you add a favicon that works on all devices (see
            <a href="http://realfavicongenerator.net/" target="_blank">Favicon Generator</a>)?
        - name: "Terms & conditions and privacy policy"
          description: |
            Some states and countries require websites to specify their
            terms & conditions and privacy policies in a clear place,
            especially if those websites collect any personal data or sell
            any sort of product. Similarly, some countries (especially
            Europe) require websites to clearly disclose any use of cookies.
            For more information, and some free legal templates, see
            <a href="https://termsfeed.com" target="_blank">TermsFeed</a>,
            <a href="https://www.pandadoc.com/website-standard-terms-and-conditions-template" target="_blank">Website Terms and Conditions Template</a>,
            and
            <a href="https://www.upcounsel.com/privacy-policy-template" target="_blank">Privacy Policy Template</a>.
        - name: "Developer accounts"
          description: |
            Set up developer accounts for the app stores need:
            <a href="https://developer.apple.com/programs/" target="_blank">Apple Developer Program</a>,
            <a href="https://play.google.com/apps/publish/signup/" target="_blank">Google Play Developer</a>,
            <a href="https://dev.windows.com/en-us/join" target="_blank">Windows App Developer</a>,
            and
            <a href="http://developer.blackberry.com/" target="_blank">BlackBerry Developer</a>.
        - name: "Notifications and messaging"
          description: |
            Set up a service to handle push notifications and messaging (e.g.,
            SMS). See
            <a href="https://aws.amazon.com/sns/" target="_blank">Amazon SNS</a>,
            <a href="https://www.twilio.com/" target="_blank">Twilio</a>,
            <a href="http://urbanairship.com/" target="_blank">Urban Airship</a>,
            and
            <a href="https://pushover.net/" target="_blank">Pushover</a>.
    - name: "Data storage"
      sublist:
        - name: "Pick a database"
          description: |
            Understand SQL, NoSQL, and NewSQL. Understand trade-offs between
            them: maturity, reading data (supported access patterns, support
            for primary/secondary indices and joins, mapping), writing data
            (aggregates, atomic updates, transactions), schemas, scalability,
            failure modes. For more information, see
            <a href="http://dataintensive.net/" target="_blank">Designing Data-Intensive Applications</a>
            and
            <a href="http://www.amazon.com/NoSQL-Distilled-Emerging-Polyglot-Persistence/dp/0321826620" target="_blank">NoSQL Distilled</a>.
        - name: "Schema management"
          description: |
            <a href="https://www.vividcortex.com/blog/2015/02/24/schemaless-databases-dont-exist/" target="_blank">Schemaless databases don't exist</a>.
            Either the schema is defined in the database itself or it's defined
            in your application code. Either way, you need to think about
            managing schemas in dev, test, and production, enforcing integrity
            constraints, and schema evolution.
        - name: "Replication"
          description: |
            <a href="https://en.wikipedia.org/wiki/Replication_(computing)" target="_blank">Replication</a>
            is essential to backup your database, so you always want to have at
            least one passive replica. It can also be useful for horizontal
            scaling with active replicas (either master-slave or multi-master
            replication).
        - name: "Partitioning"
          description: |
            <a href="https://en.wikipedia.org/wiki/Partition_(database)">Partioning</a>
            a database can be useful for improving availability and horizontal
            scalability. However, it always comes at a steep cost (harder or
            impossible to do JOINs, transactions, indices, integrity
            constraints, migrations, updates, backups, and id generation), so
            it's best avoided until absolutely necessary.
        - name: "Data processing"
          description: |
            Most startups need to process data in a variety of ways, including
            offline analytics (e.g., in a data warehouse), batch processing
            (e.g., <a href="https://hadoop.apache.org/" target="_blank">Hadoop</a>),
            or real-time processing (e.g.,
            <a href="http://kafka.apache.org/" target="_blank">Kafka</a>,
            <a href="http://samza.apache.org/" target="_blank">Samza</a>,
            <a href="http://spark.apache.org/" target="_blank">Spark</a>).
    - name: "Continuous Integration"
      description: |
        The idea behind Continuous Integration (CI) is to merge all changes
        together on a regular basis (e.g., multiple times per day or after
        every single commit) to ensure that conflicts and integration issues
        are identified immediately after they happen (when they are easiest to
        fix) instead of a long time later (i.e., during "merge hell").
      sublist:
        - name: "Version Control System (VCS)"
          description: |
            Your code should be stored in a version control system such as
            Git or SVN. You should also pick a branching strategy. To support
            continuous integration at most companies, your best bet is to use
            <a href="http://paulhammant.com/2013/04/05/what-is-trunk-based-development/" target="_blank">trunk-based development</a>.
        - name: "Build system"
          description: |
            Use an open source build system to compile, test, and package your
            code for production.
        - name: "Dependency management"
          description: |
            Your code modules should explicitly declare versioned dependencies
            on other code modules. You should use a build system to manage
            these dependencies, as well as any transitive dependencies they
            pull in.
        - name: "Automated tests"
          description: |
            You should define a suite of tests that verify your code is working.
            This includes unit tests, integration tests, acceptance tests, and
            performance tests. You should use the build system to run all the
            tests with a single command, and use it regularly during
            development.
        - name: "Automated build servers"
          description: |
            Use pre-commit and post-commit hooks in your VCS to build and test
            every check in. This is easy to set up with tools like
            <a href="https://travis-ci.org/" target="_blank">Travis CI</a>,
            <a href="https://circleci.com/" target="_blank">Circle CI</a>,
            and
            <a href="https://jenkins-ci.org/" target="_blank">Jenkins</a>.
        - name: "Static analysis"
          description: |
            You can use a variety of automated tools to check the quality of
            your code. For compiled languages, the compiler is of course the
            first line of defense, but there are a variety of other
            <a href="https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis" target="_blank">static analysis</a>
            and
            <a href="https://en.wikipedia.org/wiki/Code_coverage" target="_blank">code coverage</a>
            tools that offer useful data.
    - name: "Continuous Delivery"
      description: |
        The idea behind Continuous Delivery is that you keep your code in a
        state where you could release it at any time. You could even release
        after every single check-in, which is known as Continuous Deployment.
      sublist:
        - name: "Multiple environments"
          description: |
            Most startups have a variety of environments for the code that they
            must set up and manage: development, test, staging, and production.
        - name: "Hosting"
          description: |
            Where will your code run? Will you set up your own data center and
            rack your own servers or use a cloud offering? See
            <a href="http://www.hello-startup.net/resources/hosting/?ref=startup-checklist" target="_blank">Hosting Resources</a>
            for more information.
        - name: "Configuration management"
          description: |
            Most software exposes configuration settings that can be tweaked
            outside of the code. All configuration should be checked into your
            VCS, code reviewed, and tested, just as if it was code. You should
            also bea ble to customizable configuration per environment
            (development, test, staging, production). Configuration management
            tools such as
            <a href="https://www.chef.io/chef/" target="_blank">Chef</a>,
            <a href="https://puppetlabs.com/" target="_blank">Puppet</a>,
            and
            <a href="http://www.ansible.com/" target="_blank">Ansible</a>
            can help manage configuration across all environments. Tools like
            <a href="https://www.docker.com/" target="_blank">Docker</a>
            and
            <a href="https://www.vagrantup.com/" target="_blank">Vagrant</a>
            can help reduce the differences between environments.
        - name: "Automated deployment"
          description: |
            You should be able to deploy your code with a single click or
            command. That means there are no manual steps involved and the
            entire deployment is defined in code. That is, you should
            treat infrastructure as code. For more information, see
            <a href="http://www.hello-startup.net/resources/deployment/?ref=startup-checklist" target="_blank">Deployment Tools</a>.
          sublist:
            - name: "Canary releases"
              description: |
                When deploying new code, first deploy it to just a single new
                server (the "canary"), compare the canary with an old server
                (the "control") and either roll the new code back if there are
                any problems or roll it out to all servers if everything looks
                OK.
            - name: "Backwards compatibility"
              description: |
                In a service-oriented architecture, ensure that all public API
                changes are backwards compatible. That is, you cannot delete
                or modify an existing API until you know no clients are using it
                any more.
            - name: "Change management dashboard"
              description: |
                Create a dashboard that tracks all the changes happening to
                production services, including new deployments, configuration
                changes, hardware upgrades, feature flag changes, and so on.
                When something goes wrong, this dashboard will be the first
                place you turn to answer the question, "What changed?"
        - name: "Monitoring"
          description: |
            The monitoring ecosystem is quite fragmented (see
            <a href="https://github.com/monitoringsucks/blog-posts" target="_blank">monitoringsucks</a>), so you'll need different tools for
            different types of monitoring. For more information, see
            <a href="http://www.hello-startup.net/resources/monitoring/?ref=startup-checklist">Monitoring Resources</a>.
          sublist:
            - name: "Logging"
              description: |
                Did you name your logs correctly? What log levels are you using?
                Are you formatting each log entry so it's easy to read, both for
                computers and humans? Did you configure log rotation so each
                log file doesn't get too big? Did you set up log aggregation so
                that log data from all of your servers visible and searchable in
                a single place? Example tools:
                <a href="https://www.elastic.co/products/logstash" target="_blank">logstash</a>,
                <a href="https://www.loggly.com/" target="_blank">Loggly</a>,
                <a href="https://papertrailapp.com/" target="_blank">Papertrail</a>.
            - name: "Availability metrics"
              description: |
                Can a user access your product or not? Example tools:
                <a href="http://www.keynote.com/" target="_blank">Keynote</a>,
                <a href="https://www.pingdom.com/" target="_blank">Pingdom</a>,
                <a href="http://uptimerobot.com/" target="_blank">Uptime Robot</a>.
            - name: "Business metrics"
              description: |
                What are your users actually doing in your product? Example
                metrics: page views, clicks, conversions, referrals. Example
                tools:
                <a href="http://www.google.com/analytics/" target="_blank">Google Analytics</a>,
                <a href="https://www.kissmetrics.com/" target="_blank">KISSmetrics</a>,
                <a href="https://mixpanel.com/" target="_blank">Mixpanel</a>.
            - name: "Application metrics"
              description: |
                What is your application code doing? Example metrics: QPS,
                latency, error count, load time, payload size. Example tools:
                <a href="https://newrelic.com/" target="_blank">New Relic</a>,
                <a href="http://www.appdynamics.com/" target="_blank">AppDynamics</a>,
                <a href="https://www.ruxit.com/" target="_blank">ruxit</a>.
            - name: "Process metrics"
              description: |
                Are the right processes up and running on each server? Example
                tools:
                <a href="http://mmonit.com/monit/" target="_blank">Monit</a>,
                <a href="http://godrb.com/" target="_blank">God</a>,
                <a href="http://supervisord.org/" target="_blank">Supervisor</a>.
            - name: "Server metrics"
              description: |
                What is my server hardware doing? Example metrics: CPU usage,
                memory usage, hard-disk space, network traffic. Example tools:
                <a href="http://www.nagios.org/" target="_blank">Nagios</a>,
                <a href="https://www.icinga.org/" target="_blank">Icinga</a>,
                <a href="http://ganglia.sourceforge.net/" target="_blank">Ganglia</a>.
            - name: "Alerting"
              description: |
                Monitoring is not enough. You also need tools that actively alert
                the right person when something goes wrong. Check out
                <a href="https://www.pagerduty.com/" target="_blank">PagerDuty</a>
                and
                <a href="https://victorops.com/" target="_blank">VictorOps</a>.
        - name: "Feature flags and A/B testing"
          description: |
            Wrap new features with feature flags that are controlled by
            configuration or a web UI. Enable or disable certain features for
            specific subsets of users as a way to do A/B testing and to make
            deployment safer. Useful tools to check out:
            <a href="https://www.optimizely.com/" target="_blank">Optimizely</a>,
            <a href="http://vanity.labnotes.org/" target="_blank">Vanity</a>,
            <a href="https://developer.amazon.com/appsandservices/apis/manage/ab-testing" target="_blank">Amazon A/B testing</a>.
    - name: "Security"
      sublist:
        - name: "SSL"
          description: |
            Set up SSL certificates for your company so that you can use HTTPS.
            Ideally, you encrypt all traffic with SSL. However, at a bare
            minimum, you use it for all confidential data, including passwords
            and credit card numbers.
        - name: "VPN"
          description: |
            Set up VPN to allow employees to connect securely to your company's
            intranet.
        - name: "Secret storage"
          description: |
            Make sure you know how to safely handle and store secrets such as
            TLS certificates/keys, GPG keys, API tokens, and database
            credentials. Useful tools:
            <a href="https://www.vaultproject.io/" target="_blank">Vault</a>,
            <a href="https://square.github.io/keywhiz/" target="_blank">Keywhiz</a>,
            <a href="https://github.com/codahale/sneaker" target="_blank">Sneaker</a>,
            <a href="https://github.com/StackExchange/blackbox" target="_blank">BlackBox</a>.
        - name: "User authentication"
          description: |
            Make sure you know how to safely authenticate users, manage
            sessions, and store passwords. Useful resources:
            <a href="https://www.owasp.org/index.php/Authentication_Cheat_Sheet" target="_blank">Authentication Cheat Sheet</a>,
            <a href="https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet" target="_blank">Password Storage Cheat Sheet</a>,
            <a href="https://www.owasp.org/index.php/Session_Management_Cheat_Sheet" target="_blank">Session Management Cheat Sheet</a>,
            <a href="http://stackoverflow.com/questions/1054022/best-way-to-store-password-in-database" target="_blank">Best way to store password in database</a>,
            <a href="https://auth0.com/" target="_blank">Auth0</a>.
        - name: "Server security"
          description: |
            How do you access production servers (SSH, IAMA)? Did you disable
            the default logins and users for your database software? Are you
            running your server software as root or did you create a user with
            limited permissions? What ports are you exposing? Have you isolated
            your DMZ from your LAN?
        - name: "CSRF"
          description: |
            See the
            <a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet" target="_blank">CSRF Prevention Cheat Sheet</a>.
        - name: "XSS"
          description: |
            See
            <a href="https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet" target="_blank">XSS Prevention Cheat Sheet</a>.
        - name: "Injection attacks"
          description: |
            See
            <a href="https://www.owasp.org/index.php/Code_Injection" target="_blank">Code Injection</a>,
            <a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet" target="_blank">SQL Injection Prevention Cheat Sheet</a>,
            <a href="https://www.owasp.org/index.php/Direct_Dynamic_Code_Evaluation_(%27Eval_Injection%27)" target="_blank">Eval Injection</a>.
        - name: "Security headers"
          description: |
            See
            <a href="https://www.owasp.org/index.php/List_of_useful_HTTP_headers" target="_blank">List of useful HTTP Headers</a>.
        - name: "Security audit"
          description: |
            Bring in a 3rd party to audit your product and look for security
            vulnerabilities. They should review your code and perform
            penetration testing on the live product.
        - name: "Security advisories"
          description: |
            For every commercial and open source piece of software your rely on,
            including your operating system, programming language, web
            framework, database, and client-side libraries, make sure you can
            sign up for a security advisory mailing list that will notify you
            when vulnerability is discovered. Make sure you have the ability
            to update to a newer version of the software quickly, before hackers
            can exploit it.
        - name: "Spam and fraud"
          description: |
            Does your product have a lot of user-generated content? If so, you
            may need a way to prevent fraud and spam. At the least, you need
            something like CAPTCHA to protect against automated attacks. To
            protect against manual attacks, you may have to hire a fraud team.
    - name: "Scalability"
      sublist:
        - name: "Scaling to a larger team"
          sublist:
            - name: "Coding standards"
              description: |
                Define coding conventions for your project, including a style
                guide, testing requirements, and documentation requirements.
            - name: "Code ownership"
              description: |
                Identify an owner for each part of the code who is responsible
                for deploying the code, keeping it working, and deciding what
                changes can go in.
            - name: "Code reviews"
              description: |
                Define a code review process for your project, including a
                checklist of what to look for in a review. For more info, see
                <a href="http://www.hello-startup.net/resources/code-review/?ref=startup-checklist" target="_blank">Code Review Resources</a>.
            - name: "Documentation"
              description: |
                If you don't document it, it doesn't exist. Documentation
                includes written documentation (README, tutorial, reference
                guide), code documentation (API docs, comments, example code,
                type system), and community documentation (blog posts, Q&A
                sites, talks). For more info, see
                <a href="http://www.ybrikman.com/writing/2014/05/05/you-are-what-you-document/" target="_blank">You Are What You Document</a>.
            - name: "Split up the code"
              description: |
                It can be hard to reason and make changes to a single, giant,
                monolithic codebase, especially when many people are making
                changes to it at the same time. Two possible, orthogonal
                solutions: one is to break the code up into separate
                repositories. Another option is to break the code into separate
                services (AKA <a href="http://martinfowler.com/articles/microservices.html" target="_blank">microservices</a>)
                that can be developed and deployed completely in isolation.
        - name: "Scaling to more traffic"
          description: |
            See <a href="http://www.hello-startup.net/resources/scalability/?ref=startup-checklist" target="_blank">Scalability Resources</a>.
          sublist:
            - name: "Profiling"
              description: |
                The first step when doing anything related to performance is
                <em>always</em> to profile your code to identify the hot spots.
                They are almost never where you expect. See
                <a href="https://en.wikipedia.org/wiki/List_of_performance_analysis_tools" target="_blank">List of performance analysis tools</a>.
            - name: "Performance testing"
              description: |
                Measuring performance once is not enough. You need to set up
                automated performance tests that continuously test the code
                to prevent regressions.
            - name: "Client-side optimizations"
              sublist:
                - name: "Browser performance tools"
                  description: |
                    <a href="http://yslow.org/" target="_blank">YSlow</a>,
                    <a href="https://developers.google.com/speed/pagespeed/?hl=en" target="_blank">PageSpeed</a>
                - name: "Use a CDN"
                - name: "Expires and ETag headers"
                - name: "Use Gzip"
                - name: "Concatenate static content"
                - name: "Minify static content"
                - name: "Stylesheets at the top"
                - name: "Scripts at the bottom"
                - name: "Lazy load as much as possible"
                - name: "BigPipe streaming"
                  description: |
                    See <a href="https://www.facebook.com/notes/facebook-engineering/bigpipe-pipelining-web-pages-for-high-performance/389414033919" target="_blank">BigPipe: Pipelining web pages for high performance</a>
                    and
                    <a href="http://www.ybrikman.com/writing/2015/06/30/ping-play-big-pipe-streaming-for-play-framework/" target="_blank">Ping-Play: Big Pipe Streaming for the Play Framework</a>.
                - name: "HTML5 prefetch and prerender"
            - name: "Database optimizations"
              sublist:
                - name: "Query tuning"
                  description: |
                    Use EXPLAIN, the query optimizer, indices, hints,
                    precomputed views, denormalized data.
                - name: "Database tuning"
                  description: |
                    Tweak memory settings, CPU settings, I/O settings.
                - name: "In-memory cache"
                  description: |
                    Increase database cache settings or use a distributed cache
                    in front of the database, such as memcached.
                - name: "Vertical scaling"
                  description: |
                    Faster CPU, more RAM, faster hard-drive.
                - name: "Replication"
                  description: |
                    Master-slave replication or multi-master replication.
                - name: "Partitioning"
                  description: |
                    Vertical partioning or horizontal partioning (sharding).
            - name: "Server-side optimizations"
              description: |
                See <a href="http://www.hello-startup.net/resources/scalability/?ref=startup-checklist" target="_blank">Scalability Resources</a>.
              sublist:
                - name: "Divide and conquer (MapReduce)"
                  description: |
                    Examples: multiple web servers, sharding, MapReduce.
                - name: "Caching"
                  description: |
                    Examples: CDN, memoization, memcached.
                - name: "Laziness"
                  description: |
                    Examples: optimistic locking, lazy-load images.
                - name: "Approximate correctness"
                  description: |
                    Examples: eventual consistency, HyperLogLog.
                - name: "Asynchrony"
                  description: |
                    Examples: non-blocking I/O, event loops, lock-free data
                    structures.
                - name: "Jitter and randomization"
                  description: |
                    Examples: random cache expiration, load-balancing.
                - name: "Throttling"
                  description: |
                    Examples: rate-limiting a server.
                - name: "Redundancy"
                  description: |
                    Examples: back-up or hedged requests.
                - name: "Co-location"
                  description: |
                    Examples: CDNs, multiple data-centers, server racks.
                - name: "Vertical scaling"
                  description: |
                    Examples: faster CPU, RAM, hard-drive, network.
                - name: "Algorithm tuning"
                  description: |
                    Examples: find algorithms with a faster run-time.
    - name: "Common functionality"
      description: |
        A partial list of common features that almost every startup has to
        build.
      sublist:
        - name: "Search"
          description: |
            See
            <a href="http://lucene.apache.org/solr/" target="_blank">Solr</a>,
            <a href="https://www.elastic.co/" target="_blank">Elasticsearch</a>,
            <a href="https://www.algolia.com/" target="_blank">Algolia</a>,
            <a href="https://www.searchify.com/" target="_blank">Searchify</a>,
            and
            <a href="https://aws.amazon.com/cloudsearch/" target="_blank">Amazon CloudSearch</a>.
        - name: "Email"
          description: |
            See
            <a href="https://sendgrid.com/" target="_blank">SendGrid</a>,
            <a href="https://www.mailgun.com/" target="_blank">Mailgun</a>,
            <a href="https://aws.amazon.com/ses/" target="_blank">Amazon SES</a>,
            and
            <a href="https://www.mandrill.com/" target="_blank">Mandrill</a>.
        - name: "Notifications"
          description: |
            See
            <a href="https://aws.amazon.com/sns/" target="_blank">Amazon SNS</a>,
            <a href="https://parse.com/products/push" target="_blank">Parse Push</a>,
            and
            <a href="https://pushover.net/" target="_blank">Pushover</a>.
        - name: "User Management"
          description: |
            See
            <a href="https://auth0.com/" target="_blank">Auth0</a>,
            <a href="http://janrain.com/" target="_blank">Janrain</a>,
            <a href="https://stormpath.com/" target="_blank">Stormpath</a>,
            and
            <a href="https://www.oneall.com/" target="_blank">OneAll</a>.
        - name: "News feed"
          description: |
            See
            <a href="https://getstream.io/" target="_blank">Stream</a>
            and
            <a href="https://github.com/tschellenbach/Stream-Framework" target="_blank">Stream-Framework</a>.
        - name: "Monetization"
          description: |
            See <a href="http://www.hello-startup.net/resources/monetization/?ref=startup-checklist" target="_blank">Startup Monetization Resources</a>.
        - name: "Microservice management"
          description: |
            See
            <a href="https://getkong.org/" target="_blank">Kong</a>,
            <a href="http://aws.amazon.com/api-gateway/" target="_blank">Amazon API Gateway</a>,
            <a href="http://vamp.io/" target="_blank">Vamp</a>,
            <a href="http://nerds.airbnb.com/smartstack-service-discovery-cloud/" target="_blank">SmartStack</a>,
            <a href="https://github.com/Netflix/eureka" target="_blank">Eureka</a>,
            and
            <a href="https://serfdom.io/" target="_blank">Serf</a>.
        - name: "File storage and upload"
          description: |
            See
            <a href="http://aws.amazon.com/s3/" target="_blank">Amazon S3</a>,
            <a href="http://www.rackspace.com/cloud/files/" target="_blank">RackSpace Cloud Files</a>,
            and
            <a href="https://cloud.google.com/storage/docs/overview" target="_blank">Google Cloud Storage</a>.
- name: "Team"
  sublist:
    - name: "Culture"
      description: |
        Culture is not a soft, squishy topic that you can ignore. It is the very
        essence of what it means to be a company and you need to figure it out
        right at the start. Otherwise, it's a bit like launching a rocket:
        <a href="https://www.linkedin.com/pulse/20121029044359-22330283-to-manage-hyper-growth-get-your-launch-trajectory-right" target="_blank">if your trajectory is off by inches at launch, you can be off by miles out in orbit</a>.
        <a href="https://hbr.org/2011/03/culture-trumps-strategy-every">Culture trumps strategy, every time</a>,
        so while you can get a lot of things wrong in a startup, make sure you
        <a href="https://medium.com/@bchesky/dont-fuck-up-the-culture-597cde9ee9d4" target="_blank">don't fuck up the culture</a>.
      sublist:
        - name: "Mission and values"
          description: |
            Your company's mission is it's destination&mdash;it explains
            <em>why</em> you exist and where you are going. Your company's
            values are the principles you use to decide <em>how</em> to get
            there. Make sure to define both early in your company's existance
            (the
            <a href="http://www.slideshare.net/reed2001/culture-1798664" target="_blank">Netflix Culture Deck</a>
            and
            <a href="http://www.slideshare.net/HubSpot/the-hubspot-culture-code-creating-a-company-we-love" target="_blank">HubSpot Culture Code</a>
            are great examples). Both are important, but remember, great leaders
            always start with
            <a href="http://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action?language=en">why</a>,
            and merely defining your culture is not enough: you also have to act
            on it every day.
        - name: "Organizational design"
          description: |
            How will teams be organized? How will you priortize work, evaluate
            performance, motivate and train, and hire and fire? What will your
            <a href="http://www.bonkersworld.net/organizational-charts/" target="_blank">org chart</a>
            look like: will you have a hierarchical organization with lots of
            managers or a flat organization? Will you have titles? Will you have
            a career ladder? Will you have a separate management track and
            <a href="http://mcfunley.com/thoughts-on-the-technical-track" target="_blank">technical track</a>?
        - name: "Process"
          description: |
            Small startups don't need much process
            <a href="http://www.slideshare.net/HubSpot/the-hubspot-culture-code-creating-a-company-we-love" target="_blank">use good judgment</a>
            is usually enough. Only when good judgment has been repeatedly shown
            not to work should you consider adding any sort of process, and even
            then, do so carefully, revisit often, and prefer automation to
            manual processes (see
            <a href="http://www.agilemanifesto.org/" target="_blank">The Agile Manifesto</a>).
        - name: "Communication"
          description: |
            How will you communicate with people within the company? How will
            you communicate with people outside? How transparent will you be?
            What information will you reveal? Most startups should err on the
            side of maximal transparency, as transparency breeds trust. For a
            radical example, check out the startup
            <a href="https://buffer.com/transparency" target="_blank">Buffer</a>,
            which has open salaries, open equity, open financials, and more.
        - name: "Motivation"
          description: |
            How will you motivate employees? Offering competitive compensation
            is important, but beyond a base level of income, it
            <a href="http://content.time.com/time/magazine/article/0,9171,2019628,00.html" target="_blank">does not increase happiness</a>,
            and in some cases, offering monetary rewards can actually
            <a href="http://www.ted.com/talks/dan_pink_on_motivation?language=en" target="_blank"><em>decrease</em> motivation</a>.
            Therefore, you instead have to focus on intrinsic motivators, such
            as autonomy, mastery, and purpose.
          sublist:
            - name: "Autonomy"
              description: |
                Autonomy is the desire to control your own life. So as a
                manager, quit bossing people around, and instead, let them
                pick their own projects, determine their schedule, and even pick
                their own teammates. Examples:
                <a href="https://engineering.linkedin.com/tags/hackday" target="_blank">LinkedIn HackDays</a>,
                <a href="http://googleblog.blogspot.it/2006/05/googles-20-percent-time-in-action.html" target="_blank">Google 20% time</a>,
                and
                <a href="http://www.valvesoftware.com/company/Valve_Handbook_LowRes.pdf" target="_blank">Valve's 100% time</a>.
            - name: "Mastery"
              description: |
                Mastery is the desire to get better at things. To enable this,
                host talks, reimburse classes, and let people take on new
                projects and join new teams on a regular basis.
            - name: "Purpose"
              description: |
                Purpose is the desire to work on something greater than
                yourself. It's not about making money, but about accomplishing
                a great mission. "If you want to build a ship, don't drum up
                the men to gather wood, divide the work and give orders.
                Instead, teach them to yearn for the vast and endless sea."
    - name: "Office"
      sublist:
        - name: "Type of office"
          description: |
            Will you lease an office? Join a co-working space? Work out of your
            living room or garage? Or will you build a distributed company
            where there is no office, and everyone works from home?
        - name: "Location"
          description: |
            What kind of commute will you and your employees have? Is there
            parking available? Are there places to eat nearby? Is there room
            for future growth? What are the zoning laws for this type of
            business?
        - name: "Office basics"
          sublist:
            - name: "Electrical"
              description: |
                Make sure the building is wired for power, lighting, Internet
                (Wi-Fi and ethernet), and phone. Make sure there is enough
                power for the number of employees. Consider backup power so your
                business remains operational despite a power outage.
            - name: "Temperature control"
              description: |
                Heating, air conditioning, windows, shades.
            - name: "Bathroom facilities"
              description: |
                Make sure there are enough for the number of employees.
            - name: "Kitchen facilities"
              description: |
                At the very least, you need easy access to water, coffee, and
                basic snacks.
            - name: "Access control"
              description: |
                Keys and/or swipe cards at every exterior door. Consider if you
                need to hire security guards.
            - name: "Fire safety measures"
              description: |
                Fire extinguishers, smoke detectors, sprinklers, emergency
                exits.
            - name: "Space for focused work"
              description: |
                Offices, cubicals, open floor plans. Beware of the
                <a href="http://www.newyorker.com/business/currency/the-open-office-trap" target="_blank">Open-Office Trap</a>
                and
                <a href="http://heeris.id.au/2013/this-is-why-you-shouldnt-interrupt-a-programmer/" target="_blank">Why You Shouldn't Interrupt a Programmer</a>.
            - name: "Space for collaborative work"
              description: |
                Conference rooms and common areas.
        - name: "Office furniture & supplies"
          sublist:
            - name: "Desks & chairs"
            - name: "Cubicles"
            - name: "Filing cabinets, folders"
            - name: "Lamps"
            - name: "Conference tables, chairs"
            - name: "White boards, markers, erasers"
            - name: "TVs, projectors"
            - name: "Paper, notepads, sticky notes"
            - name: "Pens, pencils"
            - name: "Envelopes, stamps"
            - name: "Computers, monitors, keyboards, mice"
            - name: "Software: Google Apps, Microsoft Office, Adobe Photoshop, etc"
            - name: "Printers, copiers, fax"
            - name: "Phones"
        - name: "Office communication"
          description: |
            See <a href="http://www.hello-startup.net/resources/collaboration/?ref=startup-checklist" target="_blank">Startup Collaboration Resources</a>
            for more info.
          sublist:
            - name: "Email"
              description: |
                <a href="https://www.google.com/work/apps/business/" target="_blank">Google Apps for Business</a>
                is easy to setup and use.
            - name: "Chat"
              description: |
                <a href="https://slack.com/" target="_blank">Slack</a> has
                become very popular amongst startups.
            - name: "Phone & fax"
              description: |
                Check out
                <a href="http://grasshopper.com/" target="_blank">Grasshopper</a>,
                <a href="https://www.google.com/voice" target="_blank">Google Voice</a>,
                and
                <a href="http://talkroute.com/" target="_blank">Talkroute</a>.
            - name: "Wiki"
              description: |
                Check out
                <a href="https://www.mediawiki.org/wiki/MediaWiki" target="_blank">MediaWiki</a>,
                <a href="https://www.atlassian.com/software/confluence" target="_blank">Atlassian Confluence</a>,
                and
                <a href="https://slimwiki.com/" target="_blank">SlimWiki</a>,
            - name: "Project management & issue tracker"
              description: |
                Check out
                <a href="https://trello.com/">Trello</a> and
                <a href="https://asana.com/">Asana</a>.
            - name: "Business cards"
              description: |
                Check out
                <a href="http://www.vistaprint.com/" target="_blank">Vistaprint</a>.
    - name: "Hiring"
      sublist:
        - name: "Find co-founders"
          description: |
            You need a co-founder to handle part of the workload, fill in your
            weaknesses, and to talk you out of bad ideas. Startups are hard and
            without the motivation of
            <a href="http://paulgraham.com/startupmistakes.html" target="_blank">"I can't let my cofounder down"</a>,
            you're not likely to succeed. A team of 2-3 co-founders works best.
            For more information, see
            <a href="http://www.ybrikman.com/writing/2015/05/07/guide-to-hiring-for-your-startup/" target="_blank">A Guide to Hiring for your Startup</a>.
        - name: "Find advisors"
          description: |
            Everyone needs a mentor, coach, or advisor. All companies that are C
            Corporations (i.e., almost all venture-backed startups) have a
            board of directors. Find people who you can trust, who fill in the
            gaps in your skills, and who have a network you can use.
        - name: "Hire employees"
          description: |
            Stay small as long as you can. The more people you have, the more
            <a href="https://en.wikipedia.org/wiki/Brooks%E2%80%99_law" target="_blank">communication overhead</a>
            you'll have. Therefore, start hiring not when you find something a
            new employee could do, but when you find a business-critical task
            that you <em>couldn't</em> do unless you hired someone. See
            <a href="http://www.ybrikman.com/writing/2015/05/07/guide-to-hiring-for-your-startup/" target="_blank">A Guide to Hiring for your Startup</a>
            for more information.
          sublist:
            - name: "Referrals"
              description: |
                The best way to hire people is to use your network. Referrals
                <a href="https://www.sequoiacap.com/grove/posts/6bja/recruit-engineers-in-less-time" target="_blank">significantly reduce the amount of time it takes to hire someone</a>
                and they lead to higher quality hires with lower turnover. Make
                sure everyone at the company is regularly reaching out to their
                network. Offer referral incentives.
            - name: "Employer branding"
              description: |
                The next best way to hire people is through "inbound marketing"
                in the form of blog posts, talks, and open source. If people
                outside your company are regularly learning from your blog,
                attending your talks, and best of all, using and contributing to
                your open source projects, it'll be much easier to hire them.
            - name: "Job boards"
              description: |
                <a href="http://talent.linkedin.com/blog/index.php/2013/12/recruiting-active-vs-passive-candidates" target="_blank">75% of people are <em>passive candidates</em>:</a>
                they are interested in a new job opportunity if it comes along,
                but they are not actively seeking it out. That means they do not
                spend time looking at job boards. Therefore, the "post and pray"
                technique of putting up a job posting and waiting doesn't work.
                Moreover, <a href="http://www.ybrikman.com/writing/2011/04/26/your-job-posting-sucks/">your job posting sucks</a>.
                A better option is to reach out to candidates yourself and to
                post jobs in the places where even passive candidates are
                looking. For more information, see
                <a href="http://www.hello-startup.net/resources/jobs/?ref=startup-checklist" target="_blank">Startup Job Resources</a>.
            - name: "The interview"
              description: |
                Are you still forcing candidates to code on a whiteboard and
                solve tree traversal problems? There are better alternatives. See
                <a href="http://www.ybrikman.com/writing/2015/05/07/guide-to-hiring-for-your-startup/" target="_blank">A Guide to Hiring for your Startup</a>
                for more information.
            - name: "The offer"
              description: |
                How much salary should you offer? How much equity? What about
                benefits like vacation and health insurance? Did you work with
                a lawyer to craft an employment agreement that properly
                specifies who owns the IP? See
                <a href="http://www.hello-startup.net/resources/salary/?ref=startup-checklist" target="_blank">Startup Salary Resources</a>
                and
                <a href="http://www.hello-startup.net/resources/equity/?ref=startup-checklist" target="_blank">Startup Equity Resources</a>
                for more info.
            - name: "Promotions"
              description: |
                How often do you give feedback on employee performance? How do
                you reward good performers (new title, more money, more
                responsibility)? Be wary of the
                <a href="https://en.wikipedia.org/wiki/Peter_principle" target="_blank">Peter Principle</a>.
